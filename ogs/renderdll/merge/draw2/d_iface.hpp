

#pragma once

typedef struct polyvert_s
{
	float u, v, zi, s, t;
} polyvert_t;

typedef struct polydesc_s
{
	int numverts;
	float nearzi;
	msurface_t *pcurrentface;
	polyvert_t *pverts;
} polydesc_t;

// !!! if this is changed, it must be changed in d_ifacea.h too !!!
typedef struct finalvert_s
{
	int v[6]; // u, v, s, t, l, 1/z
	int flags;
	float reserved;
} finalvert_t;

// !!! if this is changed, it must be changed in d_ifacea.h too !!!
typedef struct
{
	void *pskin;
	maliasskindesc_t *pskindesc;
	int skinwidth;
	int skinheight;
	mtriangle_t *ptriangles;
	finalvert_t *pfinalverts;
	int numtriangles;
	int drawtype;
	int seamfixupX16;
} affinetridesc_t;

// !!! if this is changed, it must be changed in d_ifacea.h too !!!
typedef struct
{
	float u, v, zi, color;
} screenpart_t;

typedef struct
{
	int nump;
	emitpoint_t *pverts; // there's room for an extra element at [nump],
	                     //  if the driver wants to duplicate element [0] at
	                     //  element [nump] to avoid dealing with wrapping
	mspriteframe_t *pspriteframe;
	vec3_t vup, vright, vpn; // in worldspace
	float nearzi;
} spritedesc_t;

typedef struct
{
	int u, v;
	float zi;
	int color;
} zpointdesc_t;

extern cvar_t r_drawflat;
extern qboolean r_drawpolys;                // 1 if driver wants clipped polygons
                                            //  rather than a span list
extern qboolean r_drawculledpolys;          // 1 if driver wants clipped polygons that
                                            //  have been culled by the edge list
extern qboolean r_worldpolysbacktofront;    // 1 if driver wants polygons
                                            //  delivered back to front rather
                                            //  than front to back
extern qboolean r_recursiveaffinetriangles; // true if a driver wants to use
                                            //  recursive triangular subdivison
                                            //  and vertex drawing via
                                            //  D_PolysetDrawFinalVerts() past
                                            //  a certain distance (normally
                                            //  only used by the software
                                            //  driver)
extern float r_aliasuvscale;                // scale-up factor for screen u and v
                                            //  on Alias vertices passed to driver
extern int r_pixbytes;

extern spritedesc_t r_spritedesc;
extern zpointdesc_t r_zpointdesc;
extern polydesc_t r_polydesc;

extern int d_con_indirect; // if 0, Quake will draw console directly
                           //  to vid.buffer; if 1, Quake will
                           //  draw console via D_DrawRect. Must be
                           //  defined by driver

void D_Aff8Patch(void *pcolormap);
void D_BeginDirectRect(int x, int y, byte *pbitmap, int width, int height);
void D_DisableBackBufferAccess();
void D_EndDirectRect(int x, int y, int width, int height);
void D_PolysetDraw();
void D_PolysetDrawFinalVerts(finalvert_t *fv, int numverts);
void D_DrawParticle(particle_t *pparticle);
void D_DrawPoly();
void D_DrawSprite();
void D_DrawZPoint();
void D_EnableBackBufferAccess();
void D_EndParticles();
void D_Init();
void D_SetupFrame();
void D_StartParticles();
void D_TurnZOn();

void D_FillRect(vrect_t *vrect, int color);
void D_DrawRect();
void D_UpdateRects(vrect_t *prect);

// currently for internal use only, and should be a do-nothing function in
// hardware drivers
// FIXME: this should go away
void D_PolysetUpdateTables();

// these are currently for internal use only, and should not be used by drivers
extern int r_skydirect;
extern byte *r_skysource;

// transparency types for D_DrawRect ()
#define DR_SOLID 0
#define DR_TRANSPARENT 1

// !!! must be kept the same as in quakeasm.h !!!
#define TRANSPARENT_COLOR 0xFF // 255

//=======================================================================//

// callbacks to Quake

void R_GenTile(msurface_t *psurf, void *pdest);

// !!! if this is changed, it must be changed in d_ifacea.h too !!!
#define TURB_TEX_SIZE 64 // base turbulent texture size

// !!! if this is changed, it must be changed in d_ifacea.h too !!!
#define CYCLE 128 // turbulent cycle size

#define TILE_SIZE 128 // size of textures generated by R_GenTiledSurf

#define SKYSHIFT 7
#define SKYSIZE (1 << SKYSHIFT)
#define SKYMASK (SKYSIZE - 1)

extern float skyspeed, skyspeed2;
extern float skytime;

extern vrect_t scr_vrect;

extern byte *r_warpbuffer;